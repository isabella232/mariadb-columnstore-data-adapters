group 'com.mariadb.columnstore.api.kettle'

if (project.property('version').equals('unspecified')){
    version '1.2.0'
} else{
    version project.property('version')
}

project.ext.mcsapiLibPath = "${project.hasProperty('mcsapiLibPath') ? project.property('mcsapiLibPath') : ''}"

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8

project.ext.mcsapi_dependency_version = version

project.ext.kettle_dependency_revision = "8.1.0.0-SNAPSHOT"
project.ext.pentaho_metadata_dependency_revision = "8.1.0.0-SNAPSHOT"

repositories {
        jcenter()
        maven { url "https://public.nexus.pentaho.org/content/groups/omni/" }
        flatDir {
                dirs "${project.ext.mcsapiLibPath}", "/usr/lib", "/usr/lib64", "/usr/local/lib", "/usr/local/lib64"
        }
}

configurations.all {
        resolutionStrategy {
                failOnVersionConflict()
                preferProjectModules()

                //force transitive dependenceis that can't be resolved to the correct version
                force 'xml-apis:xml-apis:1.0.b2', 'org.eclipse.core:commands:3.3.0-I20070605-0010', 'org.eclipse:swt:3.3.0-v3346'
        }

}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

configurations {
        provided
        compile {
                extendsFrom provided
        }

        zip
}

compileJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
        compile name: "javamcsapi-${project.ext.mcsapi_dependency_version}"
        provided "org.pentaho:pentaho-metadata:${project.ext.pentaho_metadata_dependency_revision}"
        provided "pentaho-kettle:kettle-core:${project.ext.kettle_dependency_revision}"
        provided "pentaho-kettle:kettle-engine:${project.ext.kettle_dependency_revision}"
        provided "pentaho-kettle:kettle-ui-swt:${project.ext.kettle_dependency_revision}"
}

jar {
    manifest {
        attributes "build-revision": getGitHash()
        attributes "build-version": version
    }
}

task copyAndSetRPATH {

    String[] potential_libjavamcsapi_so_locations = ["${project.ext.mcsapiLibPath}", '/usr/lib', '/usr/local/lib', '/usr/lib64', '/usr/local/lib64']
    File libJavaTmp = new File(copyAndSetRPATH.getTemporaryDir().getPath() + '/libjavamcsapi.so')
     
    ext.copyAndChangeRPATH = { library ->
        copy{
            from library
            rename { String filename ->
                return "libjavamcsapi.so"
            }
            into copyAndSetRPATH.getTemporaryDir()
        }
        if ( libJavaTmp.exists() ){
            exec{
                commandLine "chrpath", "-r", "\$ORIGIN", libJavaTmp.getPath()
            }
        } else{
            throw new GradleException("can't include libjavamcsapi.so, copying from " + library.getPath() + " to " + copyAndSetRPATH.getTemporaryDir().getPath() + " failed")
        }
    }
    
    boolean found = false
    for (String s in potential_libjavamcsapi_so_locations){
        File f = new File(s,"libjavamcsapi.so.${project.ext.mcsapi_dependency_version}")
        if ( f.isFile() ){
            copyAndChangeRPATH(f)
            found = true
            break
        }
    }
    if(!found){
        throw new GradleException("can't find and include libjavamcsapi.so.${project.ext.mcsapi_dependency_version}")
    }
}

task plugin(type: Zip){
    dependsOn 'jar'
    dependsOn 'copyAndSetRPATH'

    File libJavaTmp = new File(copyAndSetRPATH.getTemporaryDir().getPath() + '/libjavamcsapi.so')
    File versionInfo = new File(plugin.getTemporaryDir().getPath() + "/version.txt");
    versionInfo.text = """Version: $version
Revision: ${getGitHash}
"""
        into("${project.name}/") {
            from jar.outputs.files
            from versionInfo
        }

        String[] potential_libmcsapi_so_locations = ["${project.ext.mcsapiLibPath}", '/usr/lib', '/usr/local/lib', '/usr/lib64', '/usr/local/lib64']

        def compileDeps = configurations.compile.resolve()
        def providedDeps = configurations.provided.resolve()
        def leftovers = compileDeps - providedDeps
        into("${project.name}/lib") {
            from leftovers
            if ( libJavaTmp.isFile() ){
                from libJavaTmp
            } else {
                throw new GradleException("can't include libjavamcsapi.so")
            }

            boolean found = false
            for (String s in potential_libmcsapi_so_locations){
                File f = new File(s,"libmcsapi.so.${project.ext.mcsapi_dependency_version}")
                if ( f.isFile() ){
                    from f
                    rename { String filename ->
                        if (filename.equals(f.getName())) {
                            return "libmcsapi.so.1"
                        } else {
                            return filename
                        }
                    }
                    found = true
                    break
                }
            }
            if (!found){
                throw new GradleException("can't find and include libmcsapi.so.${project.ext.mcsapi_dependency_version}")
            }
        }

        // clean up temporary files
        delete{
            versionInfo
            libJavaTmp
        }
}
